add_library(SDL_test UNKNOWN IMPORTED)
set_property(TARGET SDL_test APPEND PROPERTY IMPORTED_LOCATION  "${THIRDPARTY_DIR}/platform/${TARGET_PLATFORM}/libSDL_test.a")
list(APPEND TARGET_LIBRARIES SDL_test)

list(APPEND TARGET_INCLUDE_DIRS ${GTEST_INCLUDE_DIRS})
list(APPEND TARGET_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})
list(APPEND TARGET_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR})

file(GLOB_RECURSE SRCS ${CMAKE_CURRENT_SOURCE_DIR}/*.c*)
file(GLOB_RECURSE HDRS ${CMAKE_CURRENT_SOURCE_DIR}/*.h)

list(APPEND TARGET_PROJECT_SOURCES_TEST ${SRCS} ${HDRS})

set_source_files_properties( ${TARGET_RESOURCES} PROPERTIES MACOSX_PACKAGE_LOCATION ${CMAKE_PROJECT_NAME}/Contents/Resources/)

add_executable( ${CMAKE_PROJECT_NAME}-test-static ${TARGET_PROJECT_SOURCES_TEST} ${TARGET_RESOURCES})
# set_property(DIRECTORY ${CMAKE_SOURCE_DIR} PROPERTY XCODE_STARTUP_PROJECT ${CMAKE_PROJECT_NAME})

set(MY_APP_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")

set_target_properties(
    ${CMAKE_PROJECT_NAME}-test-static PROPERTIES
    MACOSX_BUNDLE TRUE
    # OUTPUT_NAME "${TARGET_EXECUTABLE_NAME}"
    MACOSX_BUNDLE_BUNDLE_NAME "${TARGET_EXECUTABLE_NAME}"
    MACOSX_BUNDLE_INFO_PLIST "${CMAKE_BINARY_DIR}/Info.plist"
    MACOSX_BUNDLE_BUNDLE_VERSION ${MY_APP_VERSION}
    MACOSX_BUNDLE_LONG_VERSION_STRING "${TARGET_EXECUTABLE_NAME} v${MY_APP_VERSION}"
    MACOSX_BUNDLE_SHORT_VERSION_STRING "${MY_APP_VERSION}"
    MACOSX_BUNDLE_COPYRIGHT "(C) 2020 NJLIGames LLC."
    MACOSX_RPATH TRUE
    XCODE_ATTRIBUTE_LD_RUNPATH_SEARCH_PATHS "@loader_path/Libraries"
    RESOURCE "${TARGET_RESOURCES}"
    XCODE_ATTRIBUTE_ENABLE_HARDENED_RUNTIME TRUE
    XCODE_ATTRIBUTE_EXECUTABLE_NAME "${TARGET_EXECUTABLE_NAME}"
    INCLUDE_DIRECTORIES "${TARGET_INCLUDE_DIRS}"
    XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER "$ENV{XCODE_PRODUCT_BUNDLE_IDENTIFIER}-test"
    XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_APPICON_NAME "AppIcon"
    XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC YES
    XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME "LaunchImage"
    XCODE_ATTRIBUTE_ENABLE_BITCODE NO
    XCODE_ATTRIBUTE_INSTALL_PATH "/Applications"
    XCODE_ATTRIBUTE_PRODUCT_NAME ${TARGET_EXECUTABLE_NAME}
    )
# set_target_properties(
#     ${CMAKE_PROJECT_NAME}-test-static PROPERTIES
#
#     MACOSX_BUNDLE TRUE
#     RESOURCE "${TARGET_RESOURCES}"
#
#     XCODE_ATTRIBUTE_DEVELOPMENT_TEAM "${XCODE_DEVELOPMENT_TEAM}"
#     POSITION_INDEPENDENT_CODE ON
#     XCODE_ATTRIBUTE_COMBINE_HIDPI_IMAGES "NO"
#     MACOSX_BUNDLE_INFO_PLIST "${CMAKE_BINARY_DIR}/Info.plist"
#     XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_APPICON_NAME "AppIcon"
#     XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER ${TARGET_BUNDLE_ID}.${TARGET_PLATFORM}.test-static
#     XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC YES
#     XCODE_ATTRIBUTE_ENABLE_BITCODE NO
#     XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "Mac Developer"
#     INCLUDE_DIRECTORIES "${TARGET_INCLUDE_DIRS}"
#     )

target_compile_definitions( ${CMAKE_PROJECT_NAME} PUBLIC ${TARGET_DEFINITIONS})
target_link_libraries( ${CMAKE_PROJECT_NAME}-test-static ${CMAKE_PROJECT_NAME}-static gtest gmock_main ${TARGET_LIBRARIES})

add_test(NAME ${CMAKE_PROJECT_NAME}-test-static COMMAND ${CMAKE_PROJECT_NAME}-test-static)

# add_executable( ${CMAKE_PROJECT_NAME}-test-framework ${TARGET_PROJECT_SOURCES_TEST} ${TARGET_RESOURCES})
# # set_property(DIRECTORY ${CMAKE_SOURCE_DIR} PROPERTY XCODE_STARTUP_PROJECT ${CMAKE_PROJECT_NAME})
#
# set_target_properties(
#     ${CMAKE_PROJECT_NAME}-test-framework PROPERTIES
#
#     MACOSX_BUNDLE TRUE
#     RESOURCE "${TARGET_RESOURCES}"
#
#     XCODE_ATTRIBUTE_DEVELOPMENT_TEAM "${XCODE_DEVELOPMENT_TEAM}"
#     POSITION_INDEPENDENT_CODE ON
#     XCODE_ATTRIBUTE_COMBINE_HIDPI_IMAGES "NO"
#     MACOSX_BUNDLE_INFO_PLIST "${CMAKE_BINARY_DIR}/Info.plist"
#     XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_APPICON_NAME "AppIcon"
#     XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER ${TARGET_BUNDLE_ID}.${TARGET_PLATFORM}.test-framework
#     XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC YES
#     XCODE_ATTRIBUTE_ENABLE_BITCODE NO
#     XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "Mac Developer"
#     INCLUDE_DIRECTORIES "${TARGET_INCLUDE_DIRS}"
#     )
#
# target_compile_definitions( ${CMAKE_PROJECT_NAME} PUBLIC ${TARGET_DEFINITIONS})
# target_link_libraries( ${CMAKE_PROJECT_NAME}-test-framework ${CMAKE_PROJECT_NAME}Framework gtest gmock_main ${TARGET_LIBRARIES})
#
# add_test(NAME ${CMAKE_PROJECT_NAME}-test-framework COMMAND ${CMAKE_PROJECT_NAME}-test-framework)


set(CLANG_FORMAT_BIN "/usr/local/bin/clang-format" CACHE STRING "use: `brew install clang-format` to install")
add_custom_target(
    clang-format-test
    COMMAND ${CLANG_FORMAT_BIN} -style=file -i ${TARGET_PROJECT_SOURCES_TEST} -verbose
    SOURCES
    "${CMAKE_SOURCE_DIR}/.clang-format"
    )
