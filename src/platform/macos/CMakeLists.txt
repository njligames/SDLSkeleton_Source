list(APPEND TARGET_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR})

set( TARGET_PROJECT_SOURCES ${TARGET_PROJECT_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/GraphicsPlatform.h )

add_library(SDL2 UNKNOWN IMPORTED)
set_property(TARGET SDL2 APPEND PROPERTY IMPORTED_LOCATION  "${THIRDPARTY_DIR}/platform/${TARGET_PLATFORM}/libSDL2.a")
list(APPEND TARGET_LIBRARIES SDL2)
set_target_properties(SDL2 PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${THIRDPARTY_DIR}/includes/SDL2)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/SDL2)

add_library(curl UNKNOWN IMPORTED)
set_property(TARGET curl APPEND PROPERTY IMPORTED_LOCATION  "${THIRDPARTY_DIR}/platform/${TARGET_PLATFORM}/libcurl.dylib")
list(APPEND TARGET_LIBRARIES curl)
set_target_properties(curl PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${THIRDPARTY_DIR}/includes/curl)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/curl)

list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/rapidjson)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/nlohmann)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/stb)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/glm)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/NJLICEngine)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/debugdraw)

list(APPEND TARGET_LIBRARIES "-framework CoreVideo")
list(APPEND TARGET_LIBRARIES "-framework Cocoa")
list(APPEND TARGET_LIBRARIES "-framework IOKit")
list(APPEND TARGET_LIBRARIES "-framework ForceFeedback")
list(APPEND TARGET_LIBRARIES "-framework Carbon")
list(APPEND TARGET_LIBRARIES "-framework CoreAudio")
list(APPEND TARGET_LIBRARIES "-framework AudioToolbox")
list(APPEND TARGET_LIBRARIES "-framework Metal")
list(APPEND TARGET_LIBRARIES "-framework OpenGL")

set(ASSET_CATALOGUE ${CMAKE_CURRENT_SOURCE_DIR}/resources/Assets.xcassets)
list(APPEND TARGET_RESOURCES ${ASSET_CATALOGUE})

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/Info.plist.in ${CMAKE_BINARY_DIR}/Info.plist)

set_source_files_properties( ${TARGET_RESOURCES} PROPERTIES MACOSX_PACKAGE_LOCATION ${CMAKE_PROJECT_NAME}/Contents/Resources/)

add_executable( ${PROJECT_NAME} ${TARGET_PROJECT_SOURCES} ${TARGET_MAIN_SOURCES} ${TARGET_INCLUDE_DIRS} ${TARGET_RESOURCES} )

set(MY_APP_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")

set_target_properties(${PROJECT_NAME} PROPERTIES
    MACOSX_BUNDLE TRUE
    OUTPUT_NAME "${TARGET_EXECUTABLE_NAME}"
    MACOSX_BUNDLE_BUNDLE_NAME "${TARGET_EXECUTABLE_NAME}"
    MACOSX_BUNDLE_INFO_PLIST "${CMAKE_BINARY_DIR}/Info.plist"
    MACOSX_BUNDLE_BUNDLE_VERSION ${MY_APP_VERSION}
    MACOSX_BUNDLE_LONG_VERSION_STRING "${TARGET_EXECUTABLE_NAME} v${MY_APP_VERSION}"
    MACOSX_BUNDLE_SHORT_VERSION_STRING "${MY_APP_VERSION}"
    MACOSX_BUNDLE_COPYRIGHT "(C) 2020 NJLIGames LLC."
    MACOSX_RPATH TRUE
    XCODE_ATTRIBUTE_LD_RUNPATH_SEARCH_PATHS "@loader_path/Libraries"
    RESOURCE "${TARGET_RESOURCES}"
    XCODE_ATTRIBUTE_ENABLE_HARDENED_RUNTIME TRUE
    XCODE_ATTRIBUTE_EXECUTABLE_NAME "${TARGET_EXECUTABLE_NAME}"
    INCLUDE_DIRECTORIES "${TARGET_INCLUDE_DIRS}"
    XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER "$ENV{XCODE_PRODUCT_BUNDLE_IDENTIFIER}"
    XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_APPICON_NAME "AppIcon"
    XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC YES
    XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME "LaunchImage"
    XCODE_ATTRIBUTE_ENABLE_BITCODE NO
    XCODE_ATTRIBUTE_INSTALL_PATH "/Applications"
    XCODE_ATTRIBUTE_PRODUCT_NAME ${TARGET_EXECUTABLE_NAME}
    )

target_compile_definitions( ${PROJECT_NAME} PUBLIC ${TARGET_DEFINITIONS})
target_link_libraries( ${PROJECT_NAME} ${TARGET_LIBRARIES})

if(TARGET_PROJECT_SOURCES)
    add_library(${CMAKE_PROJECT_NAME}-static STATIC ${TARGET_PROJECT_SOURCES})
    target_compile_definitions(${CMAKE_PROJECT_NAME}-static PUBLIC ${TARGET_DEFINITIONS})
    target_link_libraries( ${CMAKE_PROJECT_NAME}-static ${TARGET_LIBRARIES})
    set_property(TARGET ${CMAKE_PROJECT_NAME}-static PROPERTY INCLUDE_DIRECTORIES ${TARGET_INCLUDE_DIRS})
    set_property(TARGET ${CMAKE_PROJECT_NAME}-static PROPERTY OUTPUT_NAME "${TARGET_EXECUTABLE_NAME}")
    set_property(TARGET ${CMAKE_PROJECT_NAME}-static PROPERTY XCODE_ATTRIBUTE_PRODUCT_NAME ${TARGET_EXECUTABLE_NAME})

    install(TARGETS ${CMAKE_PROJECT_NAME}-static EXPORT ${CMAKE_PROJECT_NAME}Targets
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION archive
        RUNTIME DESTINATION bin)

    set(INCLUDE_FILES "")
    foreach(include_dir ${TARGET_INCLUDE_DIRS})
        set(_INCLUDE_FILES "")
        file(GLOB _INCLUDE_FILES ${include_dir}/*.h*)
        list(APPEND INCLUDE_FILES ${INCLUDE_FILES})
    endforeach()

    install(FILES ${INCLUDE_FILES} DESTINATION include/${CMAKE_PROJECT_NAME})

    # add_library(${CMAKE_PROJECT_NAME}Framework SHARED ${TARGET_PROJECT_SOURCES})
    # target_compile_definitions(${CMAKE_PROJECT_NAME}Framework PUBLIC ${TARGET_DEFINITIONS})
    # target_link_libraries( ${CMAKE_PROJECT_NAME}Framework ${TARGET_LIBRARIES})
    # set_property(TARGET ${CMAKE_PROJECT_NAME}Framework PROPERTY INCLUDE_DIRECTORIES ${TARGET_INCLUDE_DIRS})
    # set_property(TARGET ${CMAKE_PROJECT_NAME}Framework PROPERTY OUTPUT_NAME "${TARGET_EXECUTABLE_NAME}Framework")
    # set_property(TARGET ${CMAKE_PROJECT_NAME}Framework PROPERTY XCODE_ATTRIBUTE_PRODUCT_NAME "${TARGET_EXECUTABLE_NAME}Framework")
    # set_target_properties(${CMAKE_PROJECT_NAME}Framework PROPERTIES
    #     FRAMEWORK TRUE
    #     FRAMEWORK_VERSION C
    #     XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER njligames.${TARGET_PLATFORM}.${PROJECT_NAME}.framework
    #     MACOSX_FRAMEWORK_INFO_PLIST ${CMAKE_BINARY_DIR}/Info.plist
    #     VERSION 1.0.0
    #     SOVERSION 1.0.0
    #     PUBLIC_HEADER dynamicFramework.h
    #     XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "Mac Developer"
    #     )

    # install(TARGETS ${CMAKE_PROJECT_NAME}Framework EXPORT ${CMAKE_PROJECT_NAME}Targets
    #     LIBRARY DESTINATION lib
    #     ARCHIVE DESTINATION archive
    #     RUNTIME DESTINATION bin
    #     FRAMEWORK DESTINATION framework)

    set(CLANG_FORMAT_BIN "/usr/local/bin/clang-format" CACHE STRING "use: `brew install clang-format` to install")
    add_custom_target(
        clang-format
        COMMAND ${CLANG_FORMAT_BIN} -style=file -i ${TARGET_PROJECT_SOURCES} ${TARGET_MAIN_SOURCES} -verbose
        SOURCES
        "${CMAKE_SOURCE_DIR}/.clang-format"
)

endif()


if(BUILD_TEST)
    enable_testing()
    add_subdirectory(test)
endif()
