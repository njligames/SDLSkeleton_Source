list(APPEND TARGET_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR})

set( TARGET_PROJECT_SOURCES ${TARGET_PROJECT_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/GraphicsPlatform.h )

add_library(SDL2 UNKNOWN IMPORTED)
set_property(TARGET SDL2 APPEND PROPERTY IMPORTED_LOCATION  "${THIRDPARTY_DIR}/platform/${TARGET_PLATFORM}/libSDL2.a")
list(APPEND TARGET_LIBRARIES SDL2)

# add_library(SDL_test UNKNOWN IMPORTED)
# set_property(TARGET SDL_test APPEND PROPERTY IMPORTED_LOCATION  "${THIRDPARTY_DIR}/platform/${TARGET_PLATFORM}/libSDL2_test.a")
# list(APPEND TARGET_LIBRARIES SDL_test)

add_library(SDL2main UNKNOWN IMPORTED)
set_property(TARGET SDL2main APPEND PROPERTY IMPORTED_LOCATION  "${THIRDPARTY_DIR}/platform/${TARGET_PLATFORM}/libSDL2main.a")
list(APPEND TARGET_LIBRARIES SDL2main)

set_target_properties(SDL2 PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${THIRDPARTY_DIR}/includes/SDL2)

list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/SDL2)

add_library(curl UNKNOWN IMPORTED)
set_property(TARGET curl APPEND PROPERTY IMPORTED_LOCATION  "${THIRDPARTY_DIR}/platform/${TARGET_PLATFORM}/libcurl.a")
list(APPEND TARGET_LIBRARIES curl)
set_target_properties(curl PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${THIRDPARTY_DIR}/includes/curl)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/curl)

list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/rapidjson)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/nlohmann)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/stb)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/glm)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/NJLICEngine)
list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/debugdraw)

set(CMAKE_CXX_FLAGS_DEBUG "--js-opts 0 -g4 --source-map-base http://localhost:8080/ --emrun -s DEMANGLE_SUPPORT=1")
set(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -DNDEBUG --llvm-opts 3 --js-opts 1 --closure 1 -s IGNORE_CLOSURE_COMPILER_ERRORS=1")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG --llvm-opts 3 --js-opts 1 --closure 1 -s IGNORE_CLOSURE_COMPILER_ERRORS=1 --profiling")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 --js-opts 0 -g4 -DNDEBUG --profiling")

set(CMAKE_C_FLAGS_DEBUG "--js-opts 0 -g4 --source-map-base http://localhost:8080/ --emrun -s DEMANGLE_SUPPORT=1")
set(CMAKE_C_FLAGS_MINSIZEREL "-Os -DNDEBUG --llvm-opts 3 --js-opts 1 --closure 1 -s IGNORE_CLOSURE_COMPILER_ERRORS=1")
set(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG --llvm-opts 3 --js-opts 1 --closure 1 -s IGNORE_CLOSURE_COMPILER_ERRORS=1")
set(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 --js-opts 0 -g4 -DNDEBUG")

# if(PTHREADS)
# list(APPEND EXTRA_LDFLAGS "-s USE_PTHREADS=1")
# list(APPEND EXTRA_LDFLAGS "-s PTHREAD_POOL_SIZE=8")
# endif()
# list(APPEND EXTRA_LDFLAGS "--no-check-features")

# list(APPEND EXTRA_LDFLAGS "-s FULL_ES2=1")
list(APPEND EXTRA_LDFLAGS "-s TOTAL_MEMORY=1GB")

# list(APPEND EXTRA_LDFLAGS "-s ERROR_ON_UNDEFINED_SYMBOLS=0")

# list(APPEND EXTRA_FLAGS "--memory-init-file")

# string(TOUPPER CMAKE_BUILD_TYPE CMAKE_BUILD_TYPE_UPPER)
# if (CMAKE_BUILD_TYPE EQUAL "Debug")
#     message(FATAL_ERROR "CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}")
#     # list(APPEND EXTRA_LDFLAGS "-s WASM=0")
#     list(APPEND EXTRA_LDFLAGS "--emrun")
#     # list(APPEND EXTRA_LDFLAGS "-s ASSERTIONS=2")
#     # list(APPEND EXTRA_LDFLAGS "-s DEMANGLE_SUPPORT=1")
#     # list(APPEND EXTRA_LDFLAGS "-s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=1")
#     list(APPEND EXTRA_LDFLAGS "--source-map-base http://localhost:8080/")
# endif ()

# if (CMAKE_BUILD_TYPE_UPPER EQUAL "RELEASE")
#     list(APPEND EXTRA_LDFLAGS "-s WASM=1")
#     list(APPEND EXTRA_LDFLAGS "--profiling")
# endif ()

configure_file("${CMAKE_CURRENT_SOURCE_DIR}/resources/release_shell.html.in" "${CMAKE_BINARY_DIR}/release_shell.html")
list(APPEND EXTRA_LDFLAGS "--shell-file ${CMAKE_BINARY_DIR}/release_shell.html")

SET(CMAKE_EXECUTABLE_SUFFIX ".html")

set( GAME_RESOURCES "${TARGET_RESOURCES}" )
list(APPEND TARGET_RESOURCES ${GAME_RESOURCES})

list(APPEND EXTRA_LDFLAGS "--memory-init-file 1")
foreach(resource_dir ${GAME_RESOURCES})
    list(APPEND EXTRA_LDFLAGS "--embed-file ${resource_dir}@/")
endforeach()

add_executable( ${CMAKE_PROJECT_NAME} ${TARGET_PROJECT_SOURCES} ${TARGET_MAIN_SOURCES} ${TARGET_RESOURCES} ${TARGET_INCLUDE_DIRS})
target_compile_definitions( ${CMAKE_PROJECT_NAME} PUBLIC ${TARGET_DEFINITIONS})
target_link_libraries( ${CMAKE_PROJECT_NAME} ${TARGET_LIBRARIES} ${EXTRA_LDFLAGS})
set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY OUTPUT_NAME "index")
set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY INCLUDE_DIRECTORIES ${TARGET_INCLUDE_DIRS})

install(TARGETS ${CMAKE_PROJECT_NAME} EXPORT ${CMAKE_PROJECT_NAME}Targets
    RUNTIME DESTINATION bin)
INSTALL( FILES "${CMAKE_CURRENT_BINARY_DIR}/index.js" DESTINATION bin )
INSTALL( FILES "${CMAKE_CURRENT_BINARY_DIR}/index.wasm" DESTINATION bin )

if(TARGET_PROJECT_SOURCES)
    add_library(${CMAKE_PROJECT_NAME}-static STATIC ${TARGET_PROJECT_SOURCES})
    target_compile_definitions(${CMAKE_PROJECT_NAME}-static PUBLIC ${TARGET_DEFINITIONS})
    target_link_libraries( ${CMAKE_PROJECT_NAME}-static ${TARGET_LIBRARIES})
    set_property(TARGET ${CMAKE_PROJECT_NAME}-static PROPERTY INCLUDE_DIRECTORIES ${TARGET_INCLUDE_DIRS})
    set_property(TARGET ${CMAKE_PROJECT_NAME}-static PROPERTY OUTPUT_NAME "${TARGET_EXECUTABLE_NAME}")
    set_property(TARGET ${CMAKE_PROJECT_NAME}-static PROPERTY XCODE_ATTRIBUTE_PRODUCT_NAME ${TARGET_EXECUTABLE_NAME})

    install(TARGETS ${CMAKE_PROJECT_NAME}-static EXPORT ${CMAKE_PROJECT_NAME}Targets
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION archive
        RUNTIME DESTINATION bin)

    set(INCLUDE_FILES "")
    foreach(include_dir ${TARGET_INCLUDE_DIRS})
        set(_INCLUDE_FILES "")
        file(GLOB _INCLUDE_FILES ${include_dir}/*.h*)
        list(APPEND INCLUDE_FILES ${INCLUDE_FILES})
    endforeach()

    install(FILES ${INCLUDE_FILES} DESTINATION include/${CMAKE_PROJECT_NAME})

    set(CLANG_FORMAT_BIN "/usr/local/bin/clang-format" CACHE STRING "use: `brew install clang-format` to install")
    add_custom_target(
        clang-format
        COMMAND ${CLANG_FORMAT_BIN} -style=file -i ${TARGET_PROJECT_SOURCES} ${TARGET_MAIN_SOURCES} -verbose
        SOURCES
        "${CMAKE_SOURCE_DIR}/.clang-format"
)

endif()

# if(BUILD_TEST)
#     enable_testing()
#     add_subdirectory(test)
# endif()
